const { body, validationResult } = require("express-validator");
const utilities = require("../utilities");
const validate = {};


/**********************************
 *  Vehicle Data Validation Rules
 **********************************/
validate.invRules = () => {
  return [
    body("classification_id")
      .notEmpty()
      .withMessage("Classification is required."),

    body("inv_make")
      .trim()
      .escape()
      .notEmpty()
      .withMessage("Make is required."),

    body("inv_model")
      .trim()
      .escape()
      .notEmpty()
      .withMessage("Model is required."),

    body("inv_description")
      .trim()
      .escape()
      .notEmpty()
      .withMessage("Description is required."),

    body("inv_image")
      .trim()
      .notEmpty()
      .withMessage("Image path is required."),

    body("inv_thumbnail")
      .trim()
      .notEmpty()
      .withMessage("Thumbnail path is required."),

    body("inv_price")
      .trim()
      .notEmpty()
      .withMessage("Price is required.")
      .matches(/^\d+(\.\d{1,2})?$/)
      .withMessage("Price must be a valid number (no commas)."),

    body("inv_year")
      .trim()
      .notEmpty()
      .withMessage("Year is required.")
      .isInt({ min: 1886, max: new Date().getFullYear() + 1 })
      .withMessage("Enter a valid year."),

    body("inv_miles")
      .trim()
      .notEmpty()
      .withMessage("Miles is required.")
      .matches(/^\d+$/)
      .withMessage("Miles must be a whole number with no commas."),

    body("inv_color")
      .trim()
      .escape()
      .notEmpty()
      .withMessage("Color is required."),
  ];
};

/**********************************
 *  Check Vehicle Data
 **********************************/
validate.checkInvData = async (req, res, next) => {
  const {
    classification_id,
    inv_make,
    inv_model,
    inv_description,
    inv_image,
    inv_thumbnail,
    inv_price,
    inv_year,
    inv_miles,
    inv_color,
  } = req.body;

  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    let nav = await utilities.getNav();
    let classificationList = await utilities.buildClassificationList(
      classification_id
    );

    res.render("inventory/add-inventory", {
      errors: errors.array(),
      title: "Add Inventory",
      nav,
      classificationList,
      classification_id,
      inv_make,
      inv_model,
      inv_description,
      inv_image,
      inv_thumbnail,
      inv_price,
      inv_year,
      inv_miles,
      inv_color,
    });
    return;
  }
  next();
};

validate.checkUpdateData = async (req, res, next) => {
  const {
    classification_id,
    inv_make,
    inv_model,
    inv_description,
    inv_image,
    inv_thumbnail,
    inv_price,
    inv_year,
    inv_miles,
    inv_color,
    inv_id
  } = req.body;

  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    let nav = await utilities.getNav();
    let classificationList = await utilities.buildClassificationList(
      classification_id
    );
    let name = `${inv_make} ${inv_model}`

    res.render("inventory/edit-inventory", {
      errors: errors.array(),
      title: "Edit" + name,
      nav,
      classificationList,
      classification_id,
      inv_make,
      inv_model,
      inv_description,
      inv_image,
      inv_thumbnail,
      inv_price,
      inv_year,
      inv_miles,
      inv_color,
      inv_id
    });
    return;
  }
  next();
};

validate.checkDeleteData = async (req, res, next) => {
  const {
    classification_id,
    inv_make,
    inv_model,
    inv_price,
    inv_year,
    inv_id
  } = req.body;

  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    let nav = await utilities.getNav();
    let classificationList = await utilities.buildClassificationList(
      classification_id
    );
    let name = `${inv_make} ${inv_model}`;

    res.render("inventory/delete-confirm", {
      errors: errors.array(),
      title: "Delete " + name,
      nav,
      classificationList,
      classification_id,
      inv_make,
      inv_model,
      inv_price,
      inv_year,
      inv_id
    });
    return;
  }
  next();
};

/*check Employee or Admin */

const jwt = require("jsonwebtoken");

validate.checkEmployeeOrAdmin = (req, res, next) => {
  const token = req.cookies.jwt;

  if (!token) {
    req.flash("notice", "You must be logged in to access that resource.");
    return res.redirect("/account/login");
  }

  try {
    const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);

    const accountType = decoded.account_type;

    if (accountType === "Employee" || accountType === "Admin") {
      // Attach user data to the request if needed later
      req.accountData = decoded;
      return next();
    } else {
      req.flash("notice", "Access denied. You are not authorized to view this resource.");
      return res.redirect("/account/login");
    }

  } catch (err) {
    console.error("JWT verification failed:", err);
    req.flash("notice", "Session expired or invalid. Please log in again.");
    return res.redirect("/account/login");
  }
};



module.exports = validate;
